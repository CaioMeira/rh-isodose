import { Events, ImageQualityStatus } from '../../enums';
import eventTarget from '../../eventTarget';
import { triggerEvent } from '../../utilities';
import BaseStreamingImageVolume from './BaseStreamingImageVolume';
export default class StreamingDynamicImageVolume extends BaseStreamingImageVolume {
    constructor(imageVolumeProperties, streamingProperties) {
        super(imageVolumeProperties, streamingProperties);
        this._timePointIndex = 0;
        this._loadedTimePoints = new Set();
        this._getImageIdRequests = (imageIds, priority) => {
            return this.getImageIdsRequests(imageIds, priority);
        };
        this.getImageLoadRequests = (priority) => {
            const imageIds = this.getImageIdsToLoad();
            return this._getImageIdRequests(imageIds, priority);
        };
        const { imageIdGroups, splittingTag } = imageVolumeProperties;
        this._splittingTag = splittingTag;
        this._imageIdGroups = imageIdGroups;
        this.numTimePoints = this._imageIdGroups.length;
    }
    _getImageIdsToLoad() {
        const imageIdGroups = this._imageIdGroups;
        const initialImageIdGroupIndex = this._timePointIndex;
        const imageIds = [...imageIdGroups[initialImageIdGroupIndex]];
        let leftIndex = initialImageIdGroupIndex - 1;
        let rightIndex = initialImageIdGroupIndex + 1;
        while (leftIndex >= 0 || rightIndex < imageIdGroups.length) {
            if (leftIndex >= 0) {
                imageIds.push(...imageIdGroups[leftIndex--]);
            }
            if (rightIndex < imageIdGroups.length) {
                imageIds.push(...imageIdGroups[rightIndex++]);
            }
        }
        return imageIds;
    }
    getImageIdsToLoad() {
        return this._getImageIdsToLoad();
    }
    get timePointIndex() {
        return this._timePointIndex;
    }
    set timePointIndex(index) {
        if (this._timePointIndex === index) {
            return;
        }
        this._timePointIndex = index;
        this.voxelManager.setTimePoint(index);
        this.invalidateVolume(true);
        triggerEvent(eventTarget, Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED, {
            volumeId: this.volumeId,
            timePointIndex: index,
            numTimePoints: this.numTimePoints,
            imageIdGroupIndex: index,
            numImageIdGroups: this.numTimePoints,
            splittingTag: this.splittingTag,
        });
    }
    scroll(delta) {
        const newIndex = this._timePointIndex + delta;
        if (newIndex < 0) {
            this.timePointIndex = this.numTimePoints - 1;
        }
        else if (newIndex >= this.numTimePoints) {
            this.timePointIndex = 0;
        }
        else {
            this.timePointIndex = newIndex;
        }
    }
    getCurrentTimePointImageIds() {
        return this._imageIdGroups[this._timePointIndex];
    }
    flatImageIdIndexToTimePointIndex(flatImageIdIndex) {
        return Math.floor(flatImageIdIndex / this._imageIdGroups[0].length);
    }
    flatImageIdIndexToImageIdIndex(flatImageIdIndex) {
        return flatImageIdIndex % this._imageIdGroups[0].length;
    }
    get splittingTag() {
        return this._splittingTag;
    }
    isTimePointLoaded(timePointIndex) {
        return this._loadedTimePoints.has(timePointIndex);
    }
    markTimePointAsLoaded(timePointIndex) {
        this._loadedTimePoints.add(timePointIndex);
        triggerEvent(eventTarget, Events.DYNAMIC_VOLUME_TIME_POINT_LOADED, {
            volumeId: this.volumeId,
            timePointIndex,
        });
    }
    checkTimePointCompletion(imageIdIndex) {
        const timePointIndex = this.flatImageIdIndexToTimePointIndex(imageIdIndex);
        const imageIdsInTimePoint = this._imageIdGroups[timePointIndex];
        const allLoaded = imageIdsInTimePoint.every((imageId) => {
            const index = this.getImageIdIndex(imageId);
            return this.cachedFrames[index] === ImageQualityStatus.FULL_RESOLUTION;
        });
        if (allLoaded && !this.isTimePointLoaded(timePointIndex)) {
            this.markTimePointAsLoaded(timePointIndex);
        }
    }
}
