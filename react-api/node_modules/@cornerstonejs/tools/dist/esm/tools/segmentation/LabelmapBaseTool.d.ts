import type { Types } from '@cornerstonejs/core';
import { BaseTool } from '../base';
import type vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';
import * as LabelmapMemo from '../../utilities/segmentation/createLabelmapMemo';
export type PreviewData = {
    preview: unknown;
    timer?: number;
    timerStart: number;
    startPoint: Types.Point2;
    element: HTMLDivElement;
    isDrag: boolean;
};
export default class LabelmapBaseTool extends BaseTool {
    protected _editData: {
        override: {
            voxelManager: Types.IVoxelManager<number>;
            imageData: vtkImageData;
        };
        segmentsLocked: number[];
        imageId?: string;
        imageIds?: string[];
        volumeId?: string;
        referencedVolumeId?: string;
    } | null;
    protected _hoverData?: {
        brushCursor: any;
        segmentationId: string;
        segmentIndex: number;
        segmentColor: [number, number, number, number];
        viewportIdsToRender: string[];
        centerCanvas?: Array<number>;
        viewport: Types.IViewport;
    };
    static previewData?: PreviewData;
    constructor(toolProps: any, defaultToolProps: any);
    protected get _previewData(): PreviewData;
    createMemo(segmentId: string, segmentationVoxelManager: any, preview: any): LabelmapMemo.LabelmapMemo;
    createEditData(element: any): {
        volumeId: string;
        referencedVolumeId: any;
        segmentsLocked: number[] | [];
        imageId?: undefined;
        override?: undefined;
    } | {
        imageId: string;
        segmentsLocked: number[] | [];
        override: {
            voxelManager: Types.IVoxelManager<number> | Types.IVoxelManager<Types.RGB>;
            imageData: vtkImageData;
        };
        volumeId?: undefined;
        referencedVolumeId?: undefined;
    } | {
        imageId: string;
        segmentsLocked: number[] | [];
        volumeId?: undefined;
        referencedVolumeId?: undefined;
        override?: undefined;
    };
    protected createHoverData(element: any, centerCanvas?: any): {
        brushCursor: {
            metadata: {
                viewPlaneNormal: Types.Point3;
                viewUp: Types.Point3;
                FrameOfReferenceUID: string;
                referencedImageId: string;
                toolName: string;
                segmentColor: Types.Color;
            };
            data: {};
        };
        centerCanvas: any;
        segmentIndex: number;
        viewport: Types.IStackViewport | import("@cornerstonejs/core").VolumeViewport;
        segmentationId: string;
        segmentColor: Types.Color;
        viewportIdsToRender: string[];
    };
    protected getActiveSegmentationData(viewport: any): {
        segmentIndex: number;
        segmentationId: string;
        segmentColor: Types.Color;
    };
    protected getOperationData(element?: any): {
        points: any;
        segmentIndex: number;
        previewColors: any;
        viewPlaneNormal: any;
        toolGroupId: string;
        segmentationId: string;
        viewUp: any;
        strategySpecificConfiguration: any;
        preview: unknown;
        createMemo: (segmentId: string, segmentationVoxelManager: any, preview: any) => LabelmapMemo.LabelmapMemo;
        override: {
            voxelManager: Types.IVoxelManager<number>;
            imageData: vtkImageData;
        };
        segmentsLocked: number[];
        imageId?: string;
        imageIds?: string[];
        volumeId?: string;
        referencedVolumeId?: string;
    } | {
        points: any;
        segmentIndex: number;
        previewColors: any;
        viewPlaneNormal: any;
        toolGroupId: string;
        segmentationId: string;
        viewUp: any;
        strategySpecificConfiguration: any;
        preview: unknown;
        createMemo: (segmentId: string, segmentationVoxelManager: any, preview: any) => LabelmapMemo.LabelmapMemo;
        volumeId: string;
        referencedVolumeId: any;
        segmentsLocked: number[] | [];
        imageId?: undefined;
        override?: undefined;
    } | {
        points: any;
        segmentIndex: number;
        previewColors: any;
        viewPlaneNormal: any;
        toolGroupId: string;
        segmentationId: string;
        viewUp: any;
        strategySpecificConfiguration: any;
        preview: unknown;
        createMemo: (segmentId: string, segmentationVoxelManager: any, preview: any) => LabelmapMemo.LabelmapMemo;
        imageId: string;
        segmentsLocked: number[] | [];
        override: {
            voxelManager: Types.IVoxelManager<number> | Types.IVoxelManager<Types.RGB>;
            imageData: vtkImageData;
        };
        volumeId?: undefined;
        referencedVolumeId?: undefined;
    } | {
        points: any;
        segmentIndex: number;
        previewColors: any;
        viewPlaneNormal: any;
        toolGroupId: string;
        segmentationId: string;
        viewUp: any;
        strategySpecificConfiguration: any;
        preview: unknown;
        createMemo: (segmentId: string, segmentationVoxelManager: any, preview: any) => LabelmapMemo.LabelmapMemo;
        imageId: string;
        segmentsLocked: number[] | [];
        volumeId?: undefined;
        referencedVolumeId?: undefined;
        override?: undefined;
    };
    addPreview(element?: HTMLDivElement, options?: {
        acceptReject: boolean;
    }): unknown;
    rejectPreview(element?: HTMLDivElement): void;
    acceptPreview(element?: HTMLDivElement): void;
    static viewportContoursToLabelmap(viewport: Types.IViewport, options?: {
        removeContours: boolean;
    }): void;
}
